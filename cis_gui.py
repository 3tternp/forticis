import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext
import subprocess, os, datetime

def generate_html(results, output_html):
    html = """
    <html><head><title>CIS 7.0.x Report</title>
    <style>
    body {{font-family: Arial;}}
    table {{border-collapse: collapse; width: 100%;}}
    th, td {{border: 1px solid #ddd; padding: 8px;}}
    th {{background-color: #333; color: white;}}
    .critical {{background-color: #ff4d4d;}}
    .high {{background-color: #ff944d;}}
    .medium {{background-color: #ffd24d;}}
    .low {{background-color: #d9ff4d;}}
    .pass {{color: green; font-weight: bold;}}
    .fail {{color: red; font-weight: bold;}}
    </style></head><body>
    <h2>CIS 7.0.x Compliance Report</h2>
    <p>Generated: {}</p>
    <table>
    <tr><th>Finding ID</th><th>Risk</th><th>Status</th><th>Fix Type</th><th>Remediation</th></tr>
    """.format(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

    for f in results:
        html += f"<tr class='{f['risk'].lower()}'><td>{f['id']}</td><td>{f['risk']}</td>"
        html += f"<td class='{f['status'].lower()}'>{f['status']}</td>"
        html += f"<td>{f['fix_type']}</td><td>{f['remediation']}</td></tr>"

    html += "</table></body></html>"
    with open(output_html, "w") as file:
        file.write(html)

def run_checks(config_file, status_text):
    temp_out = "cis_results.tmp"
    try:
        # Run the bash script and check for errors
        result = subprocess.run(["bash", "cis_check.sh", config_file, temp_out], 
                              capture_output=True, text=True, check=True)
        if not os.path.exists(temp_out) or os.path.getsize(temp_out) == 0:
            raise FileNotFoundError("No output generated by cis_check.sh")

        findings = []
        with open(temp_out) as f:
            for line in f:
                try:
                    data = dict(item.split("=") for item in line.strip().split(";"))
                    findings.append({
                        "id": data["FINDING_ID"],
                        "risk": data["RISK"],
                        "status": data["STATUS"],
                        "fix_type": data["FIX_TYPE"],
                        "remediation": data["REMEDIATION"]
                    })
                except (KeyError, ValueError) as e:
                    status_text.insert(tk.END, f"Error parsing line: {line.strip()} ({str(e)})\n")
                    continue

        os.remove(temp_out)

        # Summarize results
        total_checks = len(findings)
        passed = sum(1 for f in findings if f["status"] == "Pass")
        failed = total_checks - passed
        summary = f"Summary: {total_checks} checks, {passed} passed, {failed} failed\n\n"
        status_text.insert(tk.END, summary)

        # Display detailed findings
        for f in findings:
            status_text.insert(tk.END, 
                f"ID: {f['id']}, Risk: {f['risk']}, Status: {f['status']}, "
                f"Fix Type: {f['fix_type']}, Remediation: {f['remediation']}\n")
        
        status_text.insert(tk.END, "\nReport saved as cis_report.html\n")
        return findings

    except subprocess.CalledProcessError as e:
        status_text.insert(tk.END, f"Error running cis_check.sh: {e.stderr}\n")
        return []
    except FileNotFoundError as e:
        status_text.insert(tk.END, f"Error: {str(e)}\n")
        return []
    except Exception as e:
        status_text.insert(tk.END, f"Unexpected error: {str(e)}\n")
        return []

def select_file(status_text):
    file_path = filedialog.askopenfilename(title="Select Config File")
    if file_path:
        status_text.delete(1.0, tk.END)  # Clear previous status
        status_text.insert(tk.END, f"Selected file: {file_path}\nRunning CIS checks...\n\n")
        results = run_checks(file_path, status_text)
        if results:
            output_html = "cis_report.html"
            generate_html(results, output_html)
            messagebox.showinfo("Report Generated", f"Report saved: {output_html}")
        else:
            messagebox.showerror("Error", "Failed to generate report. Check status for details.")

def clear_status(status_text):
    status_text.delete(1.0, tk.END)

root = tk.Tk()
root.title("CIS 7.0.x Compliance Checker")
root.geometry("800x600")  # Set window size

# Banner
banner = tk.Label(
    root,
    text="CIS 7.0.x Compliance Checker",
    font=("Arial", 16, "bold"),
    bg="#333",
    fg="white",
    pady=10
)
banner.pack(fill="x")

# Instructions
tk.Label(root, text="Select your system config file to check:", font=("Arial", 12)).pack(pady=10)

# Browse button
tk.Button(root, text="Browse", command=lambda: select_file(status_text), font=("Arial", 10)).pack(pady=5)

# Clear status button
tk.Button(root, text="Clear Status", command=lambda: clear_status(status_text), font=("Arial", 10)).pack(pady=5)

# Status area (scrolled text widget)
status_text = scrolledtext.ScrolledText(root, height=20, width=90, font=("Arial", 10), wrap=tk.WORD)
status_text.pack(pady=10, padx=10)

root.mainloop()
