import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext, ttk
import subprocess, os, datetime, time

def generate_html(results, output_html):
    html = """
    <html><head><title>CIS 7.0.x Report</title>
    <style>
    body {{font-family: Arial, sans-serif;}}
    table {{border-collapse: collapse; width: 100%;}}
    th, td {{border: 1px solid #ddd; padding: 8px;}}
    th {{background-color: #2c3e50; color: white;}}
    .critical {{background-color: #e74c3c;}}
    .high {{background-color: #e67e22;}}
    .medium {{background-color: #f1c40f;}}
    .low {{background-color: #2ecc71;}}
    .pass {{color: #27ae60; font-weight: bold;}}
    .fail {{color: #c0392b; font-weight: bold;}}
    </style></head><body>
    <h2>CIS 7.0.x Compliance Report</h2>
    <p>Generated: {}</p>
    <table>
    <tr><th>Finding ID</th><th>Risk</th><th>Status</th><th>Fix Type</th><th>Remediation</th></tr>
    """.format(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

    for f in results:
        html += f"<tr class='{f['risk'].lower()}'><td>{f['id']}</td><td>{f['risk']}</td>"
        html += f"<td class='{f['status'].lower()}'>{f['status']}</td>"
        html += f"<td>{f['fix_type']}</td><td>{f['remediation']}</td></tr>"

    html += "</table></body></html>"
    with open(output_html, "w") as file:
        file.write(html)

def run_checks(config_file, status_text):
    start_time = time.time()
    temp_out = "cis_results.tmp"
    findings = []

    try:
        # Run the bash script and check for errors
        result = subprocess.run(["bash", "cis_check.sh", config_file, temp_out], 
                              capture_output=True, text=True, check=True)
        if not os.path.exists(temp_out) or os.path.getsize(temp_out) == 0:
            raise FileNotFoundError("No output generated by cis_check.sh")

        # Parse findings
        with open(temp_out) as f:
            for line in f:
                try:
                    data = dict(item.split("=") for item in line.strip().split(";"))
                    findings.append({
                        "id": data["FINDING_ID"],
                        "risk": data["RISK"],
                        "status": data["STATUS"],
                        "fix_type": data["FIX_TYPE"],
                        "remediation": data["REMEDIATION"]
                    })
                except (KeyError, ValueError) as e:
                    status_text.insert(tk.END, f"Error parsing line: {line.strip()} ({str(e)})\n", "error")
                    continue

        os.remove(temp_out)

        # Calculate summary
        total_checks = len(findings)
        passed = sum(1 for f in findings if f["status"] == "Pass")
        failed = total_checks - passed
        risk_counts = {"Critical": 0, "High": 0, "Medium": 0, "Low": 0}
        for f in findings:
            if f["risk"] in risk_counts:
                risk_counts[f["risk"]] += 1

        # Display summary
        execution_time = time.time() - start_time
        file_size = os.path.getsize(config_file) / 1024  # Size in KB
        status_text.insert(tk.END, f"Config File: {config_file} ({file_size:.2f} KB)\n", "info")
        status_text.insert(tk.END, f"Execution Time: {execution_time:.2f} seconds\n\n", "info")
        status_text.insert(tk.END, f"Summary: {total_checks} checks, {passed} passed, {failed} failed\n", "info")
        status_text.insert(tk.END, "Risk Breakdown:\n", "info")
        for risk, count in risk_counts.items():
            status_text.insert(tk.END, f"  {risk}: {count}\n", "info")

        status_text.insert(tk.END, "\nDetailed Findings:\n", "info")
        for f in findings:
            tag = "pass" if f["status"] == "Pass" else "fail"
            status_text.insert(tk.END, 
                f"ID: {f['id']}, Risk: {f['risk']}, Status: {f['status']}, "
                f"Fix Type: {f['fix_type']}, Remediation: {f['remediation']}\n", tag)
        
        status_text.insert(tk.END, "\nReport saved as cis_report.html\n", "info")
        return findings

    except subprocess.CalledProcessError as e:
        status_text.insert(tk.END, f"Error running cis_check.sh: {e.stderr}\n", "error")
        return []
    except FileNotFoundError as e:
        status_text.insert(tk.END, f"Error: {str(e)}\n", "error")
        return []
    except Exception as e:
        status_text.insert(tk.END, f"Unexpected error: {str(e)}\n", "error")
        return []

def save_status(status_text):
    output_file = filedialog.asksaveasfilename(
        title="Save Status Report",
        defaultextension=".txt",
        filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
    )
    if output_file:
        with open(output_file, "w") as f:
            f.write(status_text.get(1.0, tk.END))
        messagebox.showinfo("Status Saved", f"Status report saved to: {output_file}")

def select_file(status_text):
    file_path = filedialog.askopenfilename(title="Select Config File")
    if file_path:
        status_text.delete(1.0, tk.END)  # Clear previous status
        status_text.insert(tk.END, f"Selected file: {file_path}\nRunning CIS checks...\n\n", "info")
        results = run_checks(file_path, status_text)
        if results:
            output_html = "cis_report.html"
            generate_html(results, output_html)
            messagebox.showinfo("Report Generated", f"Report saved: {output_html}")
        else:
            messagebox.showerror("Error", "Failed to generate report. Check status for details.")

def clear_status(status_text):
    status_text.delete(1.0, tk.END)

def on_enter(event, widget):
    widget.config(style="Hover.TButton")

def on_leave(event, widget):
    widget.config(style="TButton")

root = tk.Tk()
root.title("CIS 7.0.x Compliance Checker")
root.geometry("800x600")
root.configure(bg="#ecf0f1")  # Light background

# Styling
style = ttk.Style()
style.configure("TButton", font=("Arial", 10), padding=5)
style.configure("Hover.TButton", font=("Arial", 10, "bold"), padding=5, background="#3498db", foreground="white")
style.configure("Banner.TLabel", font=("Arial", 16, "bold"), background="#2c3e50", foreground="white", padding=10)

# Banner
banner = ttk.Label(
    root,
    text="CIS Benchmark 7.0.x Compliance Checker",
    style="Banner.TLabel",
    anchor="center"
)
banner.pack(fill="x")

# Instructions
tk.Label(
    root,
    text="Select your system config file to check:",
    font=("Arial", 12),
    bg="#ecf0f1"
).pack(pady=10)

# Button frame
button_frame = tk.Frame(root, bg="#ecf0f1")
button_frame.pack(pady=5)

# Browse button
browse_button = ttk.Button(
    button_frame,
    text="Browse",
    command=lambda: select_file(status_text)
)
browse_button.pack(side="left", padx=5)
browse_button.bind("<Enter>", lambda e: on_enter(e, browse_button))
browse_button.bind("<Leave>", lambda e: on_leave(e, browse_button))

# Clear status button
clear_button = ttk.Button(
    button_frame,
    text="Clear Status",
    command=lambda: clear_status(status_text)
)
clear_button.pack(side="left", padx=5)
clear_button.bind("<Enter>", lambda e: on_enter(e, clear_button))
clear_button.bind("<Leave>", lambda e: on_leave(e, clear_button))

# Save status button
save_button = ttk.Button(
    button_frame,
    text="Save Status",
    command=lambda: save_status(status_text)
)
save_button.pack(side="left", padx=5)
save_button.bind("<Enter>", lambda e: on_enter(e, save_button))
save_button.bind("<Leave>", lambda e: on_leave(e, save_button))

# Status area
status_text = scrolledtext.ScrolledText(
    root,
    height=20,
    width=90,
    font=("Arial", 10),
    wrap=tk.WORD,
    bg="#ffffff",
    fg="#2c3e50",
    relief="flat",
    borderwidth=1
)
status_text.pack(pady=10, padx=10)

# Configure text tags for color-coding
status_text.tag_configure("pass", foreground="#27ae60", font=("Arial", 10, "bold"))
status_text.tag_configure("fail", foreground="#c0392b", font=("Arial", 10, "bold"))
status_text.tag_configure("info", foreground="#2c3e50")
status_text.tag_configure("error", foreground="#e74c3c", font=("Arial", 10, "bold"))

root.mainloop()
